// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF642ad3eDecodeGithubComKamilskFormApiPkgDomain(in *jlexer.Lexer, out *Option) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Anonymously":
			out.Anonymously = bool(in.Bool())
		case "Debug":
			out.Debug = bool(in.Bool())
		case "NoLog":
			out.NoLog = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComKamilskFormApiPkgDomain(out *jwriter.Writer, in Option) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Anonymously\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Anonymously))
	}
	{
		const prefix string = ",\"Debug\":"
		out.RawString(prefix)
		out.Bool(bool(in.Debug))
	}
	{
		const prefix string = ",\"NoLog\":"
		out.RawString(prefix)
		out.Bool(bool(in.NoLog))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Option) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComKamilskFormApiPkgDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Option) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComKamilskFormApiPkgDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Option) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComKamilskFormApiPkgDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Option) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComKamilskFormApiPkgDomain(l, v)
}
func easyjsonF642ad3eDecodeGithubComKamilskFormApiPkgDomain1(in *jlexer.Lexer, out *InputEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "schema_id":
			out.SchemaID = ID(in.String())
		case "input_id":
			out.InputID = ID(in.String())
		case "template_id":
			if in.IsNull() {
				in.Skip()
				out.TemplateID = nil
			} else {
				if out.TemplateID == nil {
					out.TemplateID = new(ID)
				}
				*out.TemplateID = ID(in.String())
			}
		case "identifier":
			if in.IsNull() {
				in.Skip()
				out.Identifier = nil
			} else {
				if out.Identifier == nil {
					out.Identifier = new(ID)
				}
				*out.Identifier = ID(in.String())
			}
		case "context":
			(out.Context).UnmarshalEasyJSON(in)
		case "code":
			out.Code = int(in.Int())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComKamilskFormApiPkgDomain1(out *jwriter.Writer, in InputEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"schema_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.SchemaID))
	}
	{
		const prefix string = ",\"input_id\":"
		out.RawString(prefix)
		out.String(string(in.InputID))
	}
	if in.TemplateID != nil {
		const prefix string = ",\"template_id\":"
		out.RawString(prefix)
		out.String(string(*in.TemplateID))
	}
	if in.Identifier != nil {
		const prefix string = ",\"identifier\":"
		out.RawString(prefix)
		out.String(string(*in.Identifier))
	}
	{
		const prefix string = ",\"context\":"
		out.RawString(prefix)
		(in.Context).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComKamilskFormApiPkgDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComKamilskFormApiPkgDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComKamilskFormApiPkgDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComKamilskFormApiPkgDomain1(l, v)
}
func easyjsonF642ad3eDecodeGithubComKamilskFormApiPkgDomain2(in *jlexer.Lexer, out *InputContext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cookies":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Cookies = make(map[string]string)
				} else {
					out.Cookies = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.Cookies)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Headers = make(map[string][]string)
				} else {
					out.Headers = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 []string
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						in.Delim('[')
						if v2 == nil {
							if !in.IsDelim(']') {
								v2 = make([]string, 0, 4)
							} else {
								v2 = []string{}
							}
						} else {
							v2 = (v2)[:0]
						}
						for !in.IsDelim(']') {
							var v3 string
							v3 = string(in.String())
							v2 = append(v2, v3)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Headers)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "queries":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Queries = make(map[string][]string)
				} else {
					out.Queries = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 []string
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						in.Delim('[')
						if v4 == nil {
							if !in.IsDelim(']') {
								v4 = make([]string, 0, 4)
							} else {
								v4 = []string{}
							}
						} else {
							v4 = (v4)[:0]
						}
						for !in.IsDelim(']') {
							var v5 string
							v5 = string(in.String())
							v4 = append(v4, v5)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Queries)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComKamilskFormApiPkgDomain2(out *jwriter.Writer, in InputContext) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Cookies) != 0 {
		const prefix string = ",\"cookies\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Cookies {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				out.String(string(v6Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Headers) != 0 {
		const prefix string = ",\"headers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.Headers {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				if v7Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v8, v9 := range v7Value {
						if v8 > 0 {
							out.RawByte(',')
						}
						out.String(string(v9))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Queries) != 0 {
		const prefix string = ",\"queries\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.Queries {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				if v10Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v11, v12 := range v10Value {
						if v11 > 0 {
							out.RawByte(',')
						}
						out.String(string(v12))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputContext) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComKamilskFormApiPkgDomain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputContext) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComKamilskFormApiPkgDomain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputContext) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComKamilskFormApiPkgDomain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputContext) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComKamilskFormApiPkgDomain2(l, v)
}
