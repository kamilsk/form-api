// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kamilsk/form-api/pkg/service (interfaces: Storage)

// Package service_test is a generated GoMock package.
package service_test

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/kamilsk/form-api/pkg/domain"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddData mocks base method
func (m *MockStorage) AddData(arg0 domain.UUID, arg1 map[string][]string) (int64, error) {
	ret := m.ctrl.Call(m, "AddData", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddData indicates an expected call of AddData
func (mr *MockStorageMockRecorder) AddData(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddData", reflect.TypeOf((*MockStorage)(nil).AddData), arg0, arg1)
}

// Schema mocks base method
func (m *MockStorage) Schema(arg0 domain.UUID) (domain.Schema, error) {
	ret := m.ctrl.Call(m, "Schema", arg0)
	ret0, _ := ret[0].(domain.Schema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Schema indicates an expected call of Schema
func (mr *MockStorageMockRecorder) Schema(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schema", reflect.TypeOf((*MockStorage)(nil).Schema), arg0)
}
