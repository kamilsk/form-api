// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kamilsk/form-api/pkg/server/grpc (interfaces: ProtectedStorage)

// Package grpc_test is a generated GoMock package.
package grpc_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/kamilsk/form-api/pkg/domain"
	query "github.com/kamilsk/form-api/pkg/storage/query"
	types "github.com/kamilsk/form-api/pkg/storage/types"
	reflect "reflect"
)

// MockProtectedStorage is a mock of ProtectedStorage interface
type MockProtectedStorage struct {
	ctrl     *gomock.Controller
	recorder *MockProtectedStorageMockRecorder
}

// MockProtectedStorageMockRecorder is the mock recorder for MockProtectedStorage
type MockProtectedStorageMockRecorder struct {
	mock *MockProtectedStorage
}

// NewMockProtectedStorage creates a new mock instance
func NewMockProtectedStorage(ctrl *gomock.Controller) *MockProtectedStorage {
	mock := &MockProtectedStorage{ctrl: ctrl}
	mock.recorder = &MockProtectedStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProtectedStorage) EXPECT() *MockProtectedStorageMockRecorder {
	return m.recorder
}

// CreateSchema mocks base method
func (m *MockProtectedStorage) CreateSchema(arg0 context.Context, arg1 *types.Token, arg2 query.CreateSchema) (types.Schema, error) {
	ret := m.ctrl.Call(m, "CreateSchema", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.Schema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchema indicates an expected call of CreateSchema
func (mr *MockProtectedStorageMockRecorder) CreateSchema(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchema", reflect.TypeOf((*MockProtectedStorage)(nil).CreateSchema), arg0, arg1, arg2)
}

// CreateTemplate mocks base method
func (m *MockProtectedStorage) CreateTemplate(arg0 context.Context, arg1 *types.Token, arg2 query.CreateTemplate) (types.Template, error) {
	ret := m.ctrl.Call(m, "CreateTemplate", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemplate indicates an expected call of CreateTemplate
func (mr *MockProtectedStorageMockRecorder) CreateTemplate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplate", reflect.TypeOf((*MockProtectedStorage)(nil).CreateTemplate), arg0, arg1, arg2)
}

// DeleteSchema mocks base method
func (m *MockProtectedStorage) DeleteSchema(arg0 context.Context, arg1 *types.Token, arg2 query.DeleteSchema) (types.Schema, error) {
	ret := m.ctrl.Call(m, "DeleteSchema", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.Schema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchema indicates an expected call of DeleteSchema
func (mr *MockProtectedStorageMockRecorder) DeleteSchema(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchema", reflect.TypeOf((*MockProtectedStorage)(nil).DeleteSchema), arg0, arg1, arg2)
}

// DeleteTemplate mocks base method
func (m *MockProtectedStorage) DeleteTemplate(arg0 context.Context, arg1 *types.Token, arg2 query.DeleteTemplate) (types.Template, error) {
	ret := m.ctrl.Call(m, "DeleteTemplate", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTemplate indicates an expected call of DeleteTemplate
func (mr *MockProtectedStorageMockRecorder) DeleteTemplate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplate", reflect.TypeOf((*MockProtectedStorage)(nil).DeleteTemplate), arg0, arg1, arg2)
}

// ReadInputByFilter mocks base method
func (m *MockProtectedStorage) ReadInputByFilter(arg0 context.Context, arg1 *types.Token, arg2 query.InputFilter) ([]types.Input, error) {
	ret := m.ctrl.Call(m, "ReadInputByFilter", arg0, arg1, arg2)
	ret0, _ := ret[0].([]types.Input)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadInputByFilter indicates an expected call of ReadInputByFilter
func (mr *MockProtectedStorageMockRecorder) ReadInputByFilter(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInputByFilter", reflect.TypeOf((*MockProtectedStorage)(nil).ReadInputByFilter), arg0, arg1, arg2)
}

// ReadInputByID mocks base method
func (m *MockProtectedStorage) ReadInputByID(arg0 context.Context, arg1 *types.Token, arg2 domain.ID) (types.Input, error) {
	ret := m.ctrl.Call(m, "ReadInputByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.Input)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadInputByID indicates an expected call of ReadInputByID
func (mr *MockProtectedStorageMockRecorder) ReadInputByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInputByID", reflect.TypeOf((*MockProtectedStorage)(nil).ReadInputByID), arg0, arg1, arg2)
}

// ReadSchema mocks base method
func (m *MockProtectedStorage) ReadSchema(arg0 context.Context, arg1 *types.Token, arg2 query.ReadSchema) (types.Schema, error) {
	ret := m.ctrl.Call(m, "ReadSchema", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.Schema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSchema indicates an expected call of ReadSchema
func (mr *MockProtectedStorageMockRecorder) ReadSchema(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSchema", reflect.TypeOf((*MockProtectedStorage)(nil).ReadSchema), arg0, arg1, arg2)
}

// ReadTemplate mocks base method
func (m *MockProtectedStorage) ReadTemplate(arg0 context.Context, arg1 *types.Token, arg2 query.ReadTemplate) (types.Template, error) {
	ret := m.ctrl.Call(m, "ReadTemplate", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTemplate indicates an expected call of ReadTemplate
func (mr *MockProtectedStorageMockRecorder) ReadTemplate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTemplate", reflect.TypeOf((*MockProtectedStorage)(nil).ReadTemplate), arg0, arg1, arg2)
}

// TokenByID mocks base method
func (m *MockProtectedStorage) TokenByID(arg0 context.Context, arg1 domain.ID) (*types.Token, error) {
	ret := m.ctrl.Call(m, "TokenByID", arg0, arg1)
	ret0, _ := ret[0].(*types.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenByID indicates an expected call of TokenByID
func (mr *MockProtectedStorageMockRecorder) TokenByID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenByID", reflect.TypeOf((*MockProtectedStorage)(nil).TokenByID), arg0, arg1)
}

// UpdateSchema mocks base method
func (m *MockProtectedStorage) UpdateSchema(arg0 context.Context, arg1 *types.Token, arg2 query.UpdateSchema) (types.Schema, error) {
	ret := m.ctrl.Call(m, "UpdateSchema", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.Schema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchema indicates an expected call of UpdateSchema
func (mr *MockProtectedStorageMockRecorder) UpdateSchema(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchema", reflect.TypeOf((*MockProtectedStorage)(nil).UpdateSchema), arg0, arg1, arg2)
}

// UpdateTemplate mocks base method
func (m *MockProtectedStorage) UpdateTemplate(arg0 context.Context, arg1 *types.Token, arg2 query.UpdateTemplate) (types.Template, error) {
	ret := m.ctrl.Call(m, "UpdateTemplate", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTemplate indicates an expected call of UpdateTemplate
func (mr *MockProtectedStorageMockRecorder) UpdateTemplate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplate", reflect.TypeOf((*MockProtectedStorage)(nil).UpdateTemplate), arg0, arg1, arg2)
}
