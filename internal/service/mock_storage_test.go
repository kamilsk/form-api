// Code generated by MockGen. DO NOT EDIT.
// Source: go.octolab.org/ecosystem/forma/internal/service (interfaces: Storage)

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	domain "go.octolab.org/ecosystem/forma/internal/domain"
	types "go.octolab.org/ecosystem/forma/internal/storage/types"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Schema mocks base method
func (m *MockStorage) Schema(arg0 context.Context, arg1 domain.ID) (domain.Schema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schema", arg0, arg1)
	ret0, _ := ret[0].(domain.Schema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Schema indicates an expected call of Schema
func (mr *MockStorageMockRecorder) Schema(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schema", reflect.TypeOf((*MockStorage)(nil).Schema), arg0, arg1)
}

// StoreInput mocks base method
func (m *MockStorage) StoreInput(arg0 context.Context, arg1 domain.ID, arg2 domain.InputData) (*types.Input, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreInput", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.Input)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreInput indicates an expected call of StoreInput
func (mr *MockStorageMockRecorder) StoreInput(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreInput", reflect.TypeOf((*MockStorage)(nil).StoreInput), arg0, arg1, arg2)
}

// Template mocks base method
func (m *MockStorage) Template(arg0 context.Context, arg1 domain.ID) (domain.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Template", arg0, arg1)
	ret0, _ := ret[0].(domain.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Template indicates an expected call of Template
func (mr *MockStorageMockRecorder) Template(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Template", reflect.TypeOf((*MockStorage)(nil).Template), arg0, arg1)
}
